// <auto-generated />
using System;
using LegendsLabor.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace LegendsLabor.Infrastructure.Migrations
{
    [DbContext(typeof(LegendsLaborDbContext))]
    partial class LegendsLaborDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Base", b =>
                {
                    b.Property<int>("BaseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the Base entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("BaseId"));

                    b.Property<int>("Capacity")
                        .HasColumnType("integer")
                        .HasComment("The capacity of the base (e.g., # of crafting stations, # of guild members housed).");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<decimal>("IncomePerHour")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The gold income generated by the base per hour.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<DateTime>("LastCollectedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when income was last collected from the base.");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasComment("The current level of the base.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("The name of the player's base.");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Player entity.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("BaseId");

                    b.HasIndex("PlayerId");

                    b.ToTable("Bases");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Collection", b =>
                {
                    b.Property<int>("CollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the Collection entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CollectionId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("A description of the collection.");

                    b.Property<int?>("ExperienceReward")
                        .HasColumnType("integer")
                        .HasComment("The character experience reward for completing the collection. Nullable.");

                    b.Property<decimal?>("GoldRewardValue")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The gold reward value for completing the collection. Nullable.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int?>("ItemIdReward")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Item definition for the reward. Nullable.");

                    b.Property<int?>("ItemQuantityReward")
                        .HasColumnType("integer")
                        .HasComment("The quantity of the item reward. Nullable.");

                    b.Property<int?>("ItemRewardItemId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("The name of the collection.");

                    b.Property<string>("RewardDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("A description of the reward for completing the collection.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("CollectionId");

                    b.HasIndex("ItemRewardItemId");

                    b.ToTable("Collections");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.CollectionItem", b =>
                {
                    b.Property<int>("CollectionItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the CollectionItem entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("CollectionItemId"));

                    b.Property<int>("CollectionId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Collection entity.");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Item entity.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("CollectionItemId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("ItemId");

                    b.ToTable("CollectionItems");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Friendship", b =>
                {
                    b.Property<int>("FriendshipId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the Friendship entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("FriendshipId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int>("PlayerIdA")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the first player in the friendship.");

                    b.Property<int>("PlayerIdB")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the second player in the friendship.");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The nickname of the first player in the friendship.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("FriendshipId");

                    b.HasIndex("PlayerIdA");

                    b.HasIndex("PlayerIdB");

                    b.ToTable("Friendships");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.GameEvent", b =>
                {
                    b.Property<int>("GameEventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the GameEvent entity");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GameEventId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("A description of the game event.");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The end date and time of the game event.");

                    b.Property<string>("EventType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The type of game event (e.g., Special Combat, Collection Event, Double XP, Double Gold).");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int?>("MinimumPlayerLevel")
                        .HasColumnType("integer")
                        .HasComment("The minimum player level required to participate in the event. Nullable.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("The name of the game event.");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The start date and time of the game event.");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The status of the game event (e.g., Upcoming, Active, Completed).");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("GameEventId");

                    b.ToTable("GameEvents");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.GameEventReward", b =>
                {
                    b.Property<int>("GameEventRewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the GameEventReward entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GameEventRewardId"));

                    b.Property<string>("AffectedStat")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The skill affected for SkillPoints rewards (e.g., 'Swordsmanship', 'Archery'). Nullable if RewardType is not SkillPoints.");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<int>("GameEventId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the GameEvent entity.");

                    b.Property<decimal?>("GoldValue")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The gold value of the reward. Nullable.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<bool?>("IsPermanent")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the StatBoost is permanent. Nullable if not StatBoost.");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Item definition for the reward. Nullable.");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer")
                        .HasComment("The quantity of the reward (for Item, Experience, SkillPoints). Nullable.");

                    b.Property<string>("RewardType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The type of reward (e.g., Item, Gold, Experience, StatBoost, SkillPoints).");

                    b.Property<int?>("StatBoostValue")
                        .HasColumnType("integer")
                        .HasComment("The value for StatBoost rewards. Nullable.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("GameEventRewardId");

                    b.HasIndex("GameEventId");

                    b.HasIndex("ItemId");

                    b.ToTable("GameEventRewards");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Guild", b =>
                {
                    b.Property<int>("GuildId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the Guild entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GuildId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<DateTime>("FoundationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date when the guild was founded.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<string>("Logo")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("URL for the guild's logo. Nullable.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("The name of the guild.");

                    b.Property<int>("OverallRating")
                        .HasColumnType("integer")
                        .HasComment("The overall rating of the guild, calculated based on its members.");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Player who owns the guild.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("GuildId");

                    b.HasIndex("PlayerId")
                        .IsUnique();

                    b.ToTable("Guilds");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.GuildMember", b =>
                {
                    b.Property<int>("GuildMemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the GuildMember entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GuildMemberId"));

                    b.Property<DateTime>("ContractExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<int>("Focus")
                        .HasColumnType("integer")
                        .HasComment("The focus combat stat of the guild member.");

                    b.Property<int>("GuildId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Guild this member belongs to.");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasComment("The level of the guild member.");

                    b.Property<int>("MemberTypeId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the MemberType of this guild member.");

                    b.Property<int>("Might")
                        .HasColumnType("integer")
                        .HasComment("The might combat stat of the guild member.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("The name of the guild member.");

                    b.Property<int>("OverallRating")
                        .HasColumnType("integer");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The position or role of the guild member (e.g., 'Warrior').");

                    b.Property<string>("Rarity")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The rarity of the guild member (e.g., 'Common').");

                    b.Property<int>("Skill")
                        .HasColumnType("integer")
                        .HasComment("The skill combat stat of the guild member.");

                    b.Property<decimal>("Stipend")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The gold stipend for the guild member.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("GuildMemberId");

                    b.HasIndex("GuildId");

                    b.HasIndex("MemberTypeId");

                    b.ToTable("GuildMembers");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the Item entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemId"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The category of the item (e.g., Equipment, Consumable, Collectible).");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("A description of the item.");

                    b.Property<decimal>("GoldPrice")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The cost of the item in Gold.");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("URL for the item's image. Nullable.");

                    b.Property<bool>("IsAvailableInStore")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the item is available for purchase in the store.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasComment("The required player level to use this item.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("The name of the item.");

                    b.Property<string>("SubCategory")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The sub-category of the item (e.g., Sword, Axe, Shield, Helmet, Potion, Gem).");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("ItemId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.ItemEffect", b =>
                {
                    b.Property<int>("ItemEffectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the ItemEffect entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ItemEffectId"));

                    b.Property<string>("AffectedStat")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The stat affected by the item effect (e.g., 'Might', 'Skill', 'Focus'). Nullable.");

                    b.Property<bool>("ConsumesItem")
                        .HasColumnType("boolean")
                        .HasComment("Indicates whether using the effect consumes the item (typically true for Consumables).");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<int?>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasComment("Duration of the effect in minutes for temporary effects (consumables, timed buffs). Nullable.");

                    b.Property<string>("EffectType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The type of effect (e.g., StatBoost, Recovery, Special).");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<bool>("IsPermanent")
                        .HasColumnType("boolean")
                        .HasComment("Indicates whether the effect lasts permanently *while equipped* (for equipment).");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Item entity.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasComment("The amount of boost/effect.");

                    b.HasKey("ItemEffectId");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemEffects");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.MemberType", b =>
                {
                    b.Property<int>("MemberTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the MemberType entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("MemberTypeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("A description of the member type. Nullable.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The type of member (e.g., Warrior, Mage, Scout).");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("MemberTypeId");

                    b.ToTable("MemberTypes");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Player", b =>
                {
                    b.Property<int>("PlayerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the Player entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerId"));

                    b.Property<decimal>("BankedGold")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The gold stored in the player's bank.");

                    b.Property<int>("CollectionsCompletedCount")
                        .HasColumnType("integer")
                        .HasComment("Total count of collections completed by the player.");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<decimal>("CriticalChance")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("The critical hit chance of the player.");

                    b.Property<string>("CurrentState")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The current state of the player (Idle, Laboring, Training, InCombat, etc.).");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<decimal>("DodgeChance")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("The dodge chance of the player.");

                    b.Property<int>("Draws")
                        .HasColumnType("integer")
                        .HasComment("Total number of draws by the player.");

                    b.Property<int>("EnemiesDefeated")
                        .HasColumnType("integer")
                        .HasComment("Total number of enemies defeated by the player.");

                    b.Property<int>("Energy")
                        .HasColumnType("integer")
                        .HasComment("The current energy points of the player.");

                    b.Property<decimal>("EnergyRegenRate")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("The energy regeneration rate of the player.");

                    b.Property<int>("Experience")
                        .HasColumnType("integer")
                        .HasComment("Character Experience for Leveling Up.");

                    b.Property<int>("ExperienceEarnedTotal")
                        .HasColumnType("integer")
                        .HasComment("Total experience earned by the player.");

                    b.Property<int>("Focus")
                        .HasColumnType("integer")
                        .HasComment("The player's focus combat stat.");

                    b.Property<decimal>("Gold")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The primary currency (gold) held by the player.");

                    b.Property<decimal>("GoldEarnedTotal")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Total gold earned by the player.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int>("LaborCompletedCount")
                        .HasColumnType("integer")
                        .HasComment("Total count of labor activities completed by the player.");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasComment("The current level of the player.");

                    b.Property<int>("Losses")
                        .HasColumnType("integer")
                        .HasComment("Total number of losses by the player.");

                    b.Property<int>("MatchesPlayed")
                        .HasColumnType("integer")
                        .HasComment("Total number of matches played by the player.");

                    b.Property<int>("MaxEnergy")
                        .HasColumnType("integer")
                        .HasComment("Maximum energy points of the player.");

                    b.Property<int>("MaxHealth")
                        .HasColumnType("integer")
                        .HasComment("Maximum health points of the player.");

                    b.Property<int>("Might")
                        .HasColumnType("integer")
                        .HasComment("The player's might combat stat.");

                    b.Property<string>("Nickname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The player's in-game nickname.");

                    b.Property<int>("OverallRating")
                        .HasColumnType("integer")
                        .HasComment("Combat Rating/Power Level of the player.");

                    b.Property<string>("ProfileImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<int>("Skill")
                        .HasColumnType("integer")
                        .HasComment("The player's skill combat stat.");

                    b.Property<int>("SkillPoints")
                        .HasColumnType("integer")
                        .HasComment("Skill Points Gained on Level Up, spent on Skills.");

                    b.Property<DateTime>("StateChangedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the User entity.");

                    b.Property<int>("Wins")
                        .HasColumnType("integer")
                        .HasComment("Total number of wins by the player.");

                    b.HasKey("PlayerId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Players");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.PlayerCollection", b =>
                {
                    b.Property<int>("PlayerCollectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the PlayerCollection entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerCollectionId"));

                    b.Property<int>("CollectionId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Collection entity.");

                    b.Property<DateTime>("CompletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the collection was completed.");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Player entity.");

                    b.Property<bool>("RewardClaimed")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the reward for completing the collection has been claimed.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("PlayerCollectionId");

                    b.HasIndex("CollectionId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerCollections");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.PlayerItem", b =>
                {
                    b.Property<int>("PlayerItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the PlayerItem entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerItemId"));

                    b.Property<DateTime>("AcquiredAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the item was acquired.");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<string>("EquipSlot")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The equipment slot for the item (e.g., Weapon, Helmet, Chest). Nullable if not equipped or equippable.");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the item expires (for limited-time items). Nullable.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<bool>("IsEquipped")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the item is currently equipped by the player.");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Item entity.");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Player entity.");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasComment("The quantity of the item the player possesses.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("PlayerItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerItems");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.PlayerRecipe", b =>
                {
                    b.Property<int>("PlayerRecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the PlayerRecipe entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerRecipeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<DateTime?>("DiscoveryDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the recipe was discovered. Nullable until discovered.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<bool>("IsDiscovered")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the recipe has been discovered by the player.");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Player entity.");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Recipe entity.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("PlayerRecipeId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("RecipeId");

                    b.ToTable("PlayerRecipes");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.PlayerSkill", b =>
                {
                    b.Property<int>("PlayerSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the PlayerSkill entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerSkillId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<int>("Experience")
                        .HasColumnType("integer")
                        .HasComment("Experience towards this skill (if using hybrid XP/Points).");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the skill is active (e.g., if skills can be toggled or are passive/active).");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int>("Level")
                        .HasColumnType("integer")
                        .HasComment("The current level of the player's skill.");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Player entity.");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Skill entity.");

                    b.Property<DateTime>("UnlockedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the skill was unlocked.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("PlayerSkillId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("SkillId");

                    b.ToTable("PlayerSkills");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.PlayerStatModifier", b =>
                {
                    b.Property<int>("PlayerStatModifierId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the PlayerStatModifier entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("PlayerStatModifierId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<DateTime?>("ExpiresAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the stat modifier expires. Nullable.");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the stat modifier is currently active.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int>("PlayerId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Player entity.");

                    b.Property<string>("Source")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The source of the stat modifier (e.g., 'Item', 'Skill', 'Temporary Effect', 'Event').");

                    b.Property<int?>("SourceId")
                        .HasColumnType("integer")
                        .HasComment("The ID of the source (e.g., ItemId, SkillId). Nullable.");

                    b.Property<string>("StatType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The type of stat being modified (e.g., 'Might', 'Skill', 'Focus').");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasComment("The value of the stat modification (can be positive or negative).");

                    b.HasKey("PlayerStatModifierId");

                    b.HasIndex("PlayerId");

                    b.ToTable("PlayerStatModifiers");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Recipe", b =>
                {
                    b.Property<int>("RecipeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the Recipe entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RecipeId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("integer")
                        .HasComment("The difficulty level of the recipe.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int>("OutputItemId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Item produced by this recipe.");

                    b.Property<int>("OutputQuantity")
                        .HasColumnType("integer")
                        .HasComment("The quantity of the output item produced by this recipe.");

                    b.Property<int?>("SkillLevelRequired")
                        .HasColumnType("integer")
                        .HasComment("The required level in the SkillTypeRequired. Nullable.");

                    b.Property<string>("SkillTypeRequired")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The type of skill required for this recipe (e.g., 'Blacksmithing', 'Alchemy'). Nullable if no specific skill.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("RecipeId");

                    b.HasIndex("OutputItemId");

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.RecipeIngredient", b =>
                {
                    b.Property<int>("RecipeIngredientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the RecipeIngredient entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RecipeIngredientId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<int>("IngredientItemId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the required Item for this ingredient.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int>("QuantityRequired")
                        .HasColumnType("integer")
                        .HasComment("The quantity of the ingredient item required.");

                    b.Property<int>("RecipeId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Recipe entity.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("RecipeIngredientId");

                    b.HasIndex("IngredientItemId");

                    b.HasIndex("RecipeId");

                    b.ToTable("RecipeIngredients");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the Skill entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SkillId"));

                    b.Property<int>("BaseCooldown")
                        .HasColumnType("integer")
                        .HasComment("The base cooldown of the skill in seconds (0 if passive or turn-based).");

                    b.Property<int>("BaseEffectiveness")
                        .HasColumnType("integer")
                        .HasComment("The base effectiveness value for skill effects.");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The category of the skill (e.g., Offensive, Defensive, Passive, Active).");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("A description of the skill.");

                    b.Property<decimal>("GoldCostToUnlock")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Optional gold cost to unlock this skill.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int>("MaxLevel")
                        .HasColumnType("integer")
                        .HasComment("The maximum level this skill can reach.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("The name of the skill.");

                    b.Property<int>("RequiredPlayerLevel")
                        .HasColumnType("integer")
                        .HasComment("The minimum player level required to unlock this skill.");

                    b.Property<int>("SkillPointsCostToUnlock")
                        .HasColumnType("integer")
                        .HasComment("The cost in Skill Points to unlock this skill.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("SkillId");

                    b.ToTable("Skills");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.SkillEffect", b =>
                {
                    b.Property<int>("SkillEffectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the SkillEffect entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("SkillEffectId"));

                    b.Property<string>("AffectedStat")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The stat affected by the skill effect (e.g., 'Might', 'Skill', 'Focus'). Nullable.");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<string>("EffectType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The type of effect (e.g., StatBoost, StatusEffect, Damage, Healing, ChanceModifier, TriggeredEffect, PassiveEffect).");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<bool>("ScalesWithLevel")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the effect gets stronger with skill level.");

                    b.Property<decimal>("ScalingFactor")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("How much the effect increases per level (e.g., 0.1 for +10%).");

                    b.Property<int>("SkillId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Skill entity.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.Property<int>("Value")
                        .HasColumnType("integer")
                        .HasComment("The base value of the effect.");

                    b.HasKey("SkillEffectId");

                    b.HasIndex("SkillId");

                    b.ToTable("SkillEffects");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Tournament", b =>
                {
                    b.Property<int>("TournamentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the Tournament entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TournamentId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The end date and time of the tournament.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int?>("MaxPlayerLevel")
                        .HasColumnType("integer")
                        .HasComment("The maximum player level allowed to participate in the tournament. Nullable.");

                    b.Property<int?>("MinPlayerLevel")
                        .HasColumnType("integer")
                        .HasComment("The minimum player level required to participate in the tournament. Nullable.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("The name of the tournament.");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The start date and time of the tournament.");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The status of the tournament (e.g., Upcoming, Active, Completed).");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The type of tournament (e.g., Arena, GuildWar, Special).");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("TournamentId");

                    b.ToTable("Tournaments");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.TournamentReward", b =>
                {
                    b.Property<int>("TournamentRewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the TournamentReward entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TournamentRewardId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<int?>("Experience")
                        .HasColumnType("integer")
                        .HasComment("The character experience reward for this position. Nullable.");

                    b.Property<decimal?>("Gold")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The gold reward for this position. Nullable.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int>("Position")
                        .HasColumnType("integer")
                        .HasComment("The rank that receives this reward.");

                    b.Property<int>("TournamentId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Tournament entity.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("TournamentRewardId");

                    b.HasIndex("TournamentId");

                    b.ToTable("TournamentRewards");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.TournamentRewardItem", b =>
                {
                    b.Property<int>("TournamentRewardItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the TournamentRewardItem entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TournamentRewardItemId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int>("ItemId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Item entity.");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasComment("The quantity of the item reward.");

                    b.Property<int>("TournamentRewardId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the TournamentReward entity.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("TournamentRewardItemId");

                    b.HasIndex("ItemId");

                    b.HasIndex("TournamentRewardId");

                    b.ToTable("TournamentRewardItems");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.TrainingType", b =>
                {
                    b.Property<int>("TrainingTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the TrainingType entity. Renamable to TrainingRegimenId.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("TrainingTypeId"));

                    b.Property<int>("CooldownMinutes")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("A description of the training activity.");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasComment("The duration of the training activity in minutes.");

                    b.Property<int>("EnergyCost")
                        .HasColumnType("integer")
                        .HasComment("The energy cost to perform this training activity.");

                    b.Property<int>("ExperienceReward")
                        .HasColumnType("integer")
                        .HasComment("The character experience reward for completing this training activity.");

                    b.Property<decimal>("FailureChance")
                        .HasColumnType("decimal(5,2)");

                    b.Property<string>("FailurePenalty")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<decimal?>("GoldCost")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("Optional gold cost for training. Nullable.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int>("MinimumPlayerLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("The name of the training activity.");

                    b.Property<int?>("SkillExperienceReward")
                        .HasColumnType("integer")
                        .HasComment("Experience gained towards a specific skill. Nullable.");

                    b.Property<int?>("SkillPointsReward")
                        .HasColumnType("integer")
                        .HasComment("Skill Points gained from training. Nullable.");

                    b.Property<int?>("StatIncreaseValue")
                        .HasColumnType("integer")
                        .HasComment("The base value of the stat increase from training. Nullable.");

                    b.Property<int?>("TargetSkillId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the targeted Skill. Nullable if not targeting a specific skill.");

                    b.Property<string>("TargetStatType")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The type of stat targeted by the training (e.g., 'Might', 'Skill', 'Focus'). Nullable if training targets skills or gives general XP/rewards.");

                    b.Property<int>("Tier")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("TrainingTypeId");

                    b.HasIndex("TargetSkillId");

                    b.ToTable("TrainingType");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the User entity.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("UserId"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("The email address of the user.");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the user account is active.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the user last logged in. Nullable.");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("The hashed password of the user for security.");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the user registered.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The username for the user.");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Work", b =>
                {
                    b.Property<int>("WorkId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the Work entity. Renamable to LaborTypeId/GatheringTypeId.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkId"));

                    b.Property<int>("CooldownMinutes")
                        .HasColumnType("integer")
                        .HasComment("The cooldown period in minutes before this work activity can be attempted again.");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("A description of the work activity.");

                    b.Property<int>("DurationMinutes")
                        .HasColumnType("integer")
                        .HasComment("The duration of the work activity in minutes.");

                    b.Property<int>("EnergyCost")
                        .HasColumnType("integer")
                        .HasComment("The energy cost to perform this work activity.");

                    b.Property<int>("ExperienceReward")
                        .HasColumnType("integer")
                        .HasComment("The character experience reward for completing this work activity.");

                    b.Property<decimal>("FailureChance")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("The chance of failure for the activity.");

                    b.Property<string>("FailureDescription")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasComment("A description of the failure condition. Nullable.");

                    b.Property<decimal>("GoldReward")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The fixed gold reward for completing this work activity.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<decimal>("ItemDropChance")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("The total chance for ANY item to drop from WorkRewards for this activity.");

                    b.Property<int>("MinimumPlayerLevel")
                        .HasColumnType("integer")
                        .HasComment("The minimum player level required to undertake this work activity.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasComment("The name of the work activity.");

                    b.Property<int>("Tier")
                        .HasColumnType("integer")
                        .HasComment("The tier of the work activity.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.HasKey("WorkId");

                    b.ToTable("Works");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.WorkReward", b =>
                {
                    b.Property<int>("WorkRewardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasComment("Primary key for the WorkReward entity. Renamable to LaborRewardId.");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkRewardId"));

                    b.Property<string>("AffectedStat")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The stat affected for StatBoost rewards (e.g., 'Might', 'Skill', 'Focus'). Nullable if not StatBoost.");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was created.");

                    b.Property<string>("CreatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who created the entity. Nullable.");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was deleted. Nullable.");

                    b.Property<string>("DeletedBy")
                        .HasColumnType("text")
                        .HasComment("The user who deleted the entity. Nullable.");

                    b.Property<decimal>("DropChance")
                        .HasColumnType("decimal(5,2)")
                        .HasComment("The percentage chance for this specific reward item/type to drop.");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean")
                        .HasComment("Indicates if the entity is deleted.");

                    b.Property<int?>("ItemId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Item definition. Nullable.");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer")
                        .HasComment("The quantity of the reward (for Item or Experience).");

                    b.Property<string>("RewardType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasComment("The type of reward (e.g., Item, Experience, StatBoost).");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone")
                        .HasComment("The date and time when the entity was last updated. Nullable.");

                    b.Property<string>("UpdatedBy")
                        .HasColumnType("text")
                        .HasComment("The user who last updated the entity. Nullable.");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)")
                        .HasComment("The value for StatBoost rewards. Nullable.");

                    b.Property<int>("WorkId")
                        .HasColumnType("integer")
                        .HasComment("Foreign key to the Work entity. Renamable to LaborTypeId.");

                    b.HasKey("WorkRewardId");

                    b.HasIndex("ItemId");

                    b.HasIndex("WorkId");

                    b.ToTable("WorkRewards");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Base", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Player", "Player")
                        .WithMany("Bases")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Collection", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Item", "ItemReward")
                        .WithMany()
                        .HasForeignKey("ItemRewardItemId");

                    b.Navigation("ItemReward");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.CollectionItem", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Collection", "Collection")
                        .WithMany("CollectionItems")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegendsLabor.Core.Domain.Entities.Item", "Item")
                        .WithMany("CollectionItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Friendship", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Player", "PlayerA")
                        .WithMany("ChallengedFriendships")
                        .HasForeignKey("PlayerIdA")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("LegendsLabor.Core.Domain.Entities.Player", "PlayerB")
                        .WithMany("ChallengerFriendships")
                        .HasForeignKey("PlayerIdB")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("PlayerA");

                    b.Navigation("PlayerB");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.GameEventReward", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.GameEvent", "GameEvent")
                        .WithMany("Rewards")
                        .HasForeignKey("GameEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegendsLabor.Core.Domain.Entities.Item", "Item")
                        .WithMany("GameEventRewards")
                        .HasForeignKey("ItemId");

                    b.Navigation("GameEvent");

                    b.Navigation("Item");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Guild", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Player", "Owner")
                        .WithOne("OwnedGuild")
                        .HasForeignKey("LegendsLabor.Core.Domain.Entities.Guild", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.GuildMember", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Guild", "Guild")
                        .WithMany("GuildMembers")
                        .HasForeignKey("GuildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegendsLabor.Core.Domain.Entities.MemberType", "MemberType")
                        .WithMany("GuildMembers")
                        .HasForeignKey("MemberTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Guild");

                    b.Navigation("MemberType");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.ItemEffect", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Item", "Item")
                        .WithMany("Effects")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Player", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.User", "User")
                        .WithOne("Player")
                        .HasForeignKey("LegendsLabor.Core.Domain.Entities.Player", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.PlayerCollection", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Collection", "Collection")
                        .WithMany("PlayerCollections")
                        .HasForeignKey("CollectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegendsLabor.Core.Domain.Entities.Player", "Player")
                        .WithMany("PlayerCollections")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Collection");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.PlayerItem", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Item", "Item")
                        .WithMany("PlayerItems")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegendsLabor.Core.Domain.Entities.Player", "Player")
                        .WithMany("Items")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.PlayerRecipe", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Player", "Player")
                        .WithMany("PlayerRecipes")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegendsLabor.Core.Domain.Entities.Recipe", "Recipe")
                        .WithMany("PlayerRecipes")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.PlayerSkill", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Player", "Player")
                        .WithMany("Skills")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegendsLabor.Core.Domain.Entities.Skill", "Skill")
                        .WithMany("PlayerSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.PlayerStatModifier", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Player", "Player")
                        .WithMany("StatModifiers")
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Player");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Recipe", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Item", "OutputItem")
                        .WithMany()
                        .HasForeignKey("OutputItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OutputItem");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.RecipeIngredient", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Item", "IngredientItem")
                        .WithMany()
                        .HasForeignKey("IngredientItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegendsLabor.Core.Domain.Entities.Recipe", "Recipe")
                        .WithMany("Ingredients")
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("IngredientItem");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.SkillEffect", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Skill", "Skill")
                        .WithMany("Effects")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.TournamentReward", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Tournament", "Tournament")
                        .WithMany("Rewards")
                        .HasForeignKey("TournamentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tournament");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.TournamentRewardItem", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Item", "Item")
                        .WithMany("TournamentRewards")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("LegendsLabor.Core.Domain.Entities.TournamentReward", "TournamentReward")
                        .WithMany("Items")
                        .HasForeignKey("TournamentRewardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("TournamentReward");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.TrainingType", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Skill", "TargetSkill")
                        .WithMany("TrainingTypes")
                        .HasForeignKey("TargetSkillId");

                    b.Navigation("TargetSkill");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.WorkReward", b =>
                {
                    b.HasOne("LegendsLabor.Core.Domain.Entities.Item", "Item")
                        .WithMany("WorkRewards")
                        .HasForeignKey("ItemId");

                    b.HasOne("LegendsLabor.Core.Domain.Entities.Work", "Work")
                        .WithMany("Rewards")
                        .HasForeignKey("WorkId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Work");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Collection", b =>
                {
                    b.Navigation("CollectionItems");

                    b.Navigation("PlayerCollections");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.GameEvent", b =>
                {
                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Guild", b =>
                {
                    b.Navigation("GuildMembers");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Item", b =>
                {
                    b.Navigation("CollectionItems");

                    b.Navigation("Effects");

                    b.Navigation("GameEventRewards");

                    b.Navigation("PlayerItems");

                    b.Navigation("TournamentRewards");

                    b.Navigation("WorkRewards");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.MemberType", b =>
                {
                    b.Navigation("GuildMembers");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Player", b =>
                {
                    b.Navigation("Bases");

                    b.Navigation("ChallengedFriendships");

                    b.Navigation("ChallengerFriendships");

                    b.Navigation("Items");

                    b.Navigation("OwnedGuild");

                    b.Navigation("PlayerCollections");

                    b.Navigation("PlayerRecipes");

                    b.Navigation("Skills");

                    b.Navigation("StatModifiers");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Recipe", b =>
                {
                    b.Navigation("Ingredients");

                    b.Navigation("PlayerRecipes");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Skill", b =>
                {
                    b.Navigation("Effects");

                    b.Navigation("PlayerSkills");

                    b.Navigation("TrainingTypes");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Tournament", b =>
                {
                    b.Navigation("Rewards");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.TournamentReward", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.User", b =>
                {
                    b.Navigation("Player");
                });

            modelBuilder.Entity("LegendsLabor.Core.Domain.Entities.Work", b =>
                {
                    b.Navigation("Rewards");
                });
#pragma warning restore 612, 618
        }
    }
}
